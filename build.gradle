import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id 'checkstyle'
    id "org.sonarqube" version "3.4.0.2513"
    id 'jacoco'
    id "org.owasp.dependencycheck" version "8.1.2"
    id 'au.com.dius.pact' version '4.4.0-beta.4'
    id "com.github.spotbugs" version "5.0.10"
    id 'application'
    id 'maven-publish'
}

apply plugin: SpringBootPlugin

dependencyManagement {
    imports {
        mavenBom "org.keycloak.bom:keycloak-adapter-bom:19.0.1"
        mavenBom "com.fasterxml.jackson:jackson-bom:2.13.3"
        mavenBom "org.springframework:spring-framework-bom:5.3.22"
        mavenBom "org.springframework.security:spring-security-bom:5.7.5"
    }
}

checkstyle {
    toolVersion = '8.31'
    configDirectory = file("${rootProject.projectDir}/tools/checkstyle")
}

sonarqube {
    properties {
        property "sonar.projectKey", getProjectProperty('sonarprojectkey')
        property "sonar.organization", getProjectProperty('sonarorganization')
        property "sonar.host.url", getProjectProperty('sonarhosturl')
        property "sonar.login", getProjectProperty('sonarlogin')
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}

jacocoTestCoverageVerification {
    violationRules {

        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.9
            }
            excludes = [
                    'com.thoughtworks.PaymentApplication',
                    'com.thoughtworks.RestTemplateConfig',
                    'com.thoughtworks.security.*',
                    'com.thoughtworks.payment.KeycloakAuthenticationController',
                    'com.thoughtworks.serviceclients.HttpClient',
                    'com.thoughtworks.serviceclients.util.TracingUtil',
                    'com.thoughtworks.user.UserController',
                    'com.thoughtworks.user.UserService',
                    'com.thoughtworks.StringEncryptor',
                    'com.thoughtworks.user.model.User',
                    'com.thoughtworks.config.YamlPropertySourceFactory',
                    'com.thoughtworks.user.model.MaskingSerializer'
            ]
        }
    }
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

group = 'com.thoughtworks'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17
mainClassName = 'com.thoughtworks.PaymentApplication'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

//ext {
//    springCloudVersion = 'Finchley.SR1'
//}

String getProjectProperty(String propertyName) {
    String propertyValue = "null"
    if (hasProperty(propertyName)) {
        propertyValue = this.properties[propertyName]
    }
    return propertyValue
}

test {
    systemProperty 'spring.profiles.active', 'test'
    useJUnitPlatform()
}

ext {
}

dependencies {
    implementation('com.google.code.gson:gson:2.9.0')

    implementation('org.springframework.boot:spring-boot-starter-data-jpa:2.7.3') {
        exclude group: 'org.dom4j', module: 'dom4j'
    }
    implementation('org.dom4j:dom4j:2.1.3')

    implementation('org.springframework.boot:spring-boot-starter-web:2.7.3') {
        exclude group: 'org.springframework', module: 'spring-web'
    }
    implementation('org.springframework.boot:spring-boot-starter-validation:2.7.3')

    implementation('org.springframework.boot:spring-boot-starter-tomcat:2.7.3') {
    }

    implementation('org.springframework.boot:spring-boot-starter-aop:2.7.3')
    implementation('org.springframework.boot:spring-boot-starter-actuator:2.7.3')
    implementation('org.springframework.boot:spring-boot-starter-oauth2-resource-server:2.7.3')

    implementation('org.springframework.security:spring-security-oauth2-jose:5.7.5') {
        exclude group: 'com.nimbusds', module: 'nimbus-jose-jwt'
    }
    implementation('com.nimbusds:nimbus-jose-jwt:9.24.2')

    implementation('org.springframework.cloud:spring-cloud-starter-vault-config:3.1.1')
    implementation('org.springframework.cloud:spring-cloud-starter-config:3.1.1')
    implementation group: 'org.springframework', name: 'spring-webmvc', version: '5.3.22'

    implementation('org.apache.httpcomponents:httpclient:4.5.13')
    implementation('org.apache.commons:commons-lang3:3.12.0')

    implementation('net.logstash.logback:logstash-logback-encoder:7.2')
    compileOnly('org.projectlombok:lombok:1.18.24')
    implementation('javax.servlet:javax.servlet-api:4.0.1')

    annotationProcessor('org.projectlombok:lombok:1.18.24')
    implementation('io.github.cdimascio:dotenv-java:2.2.4')
    implementation('commons-io:commons-io:2.11.0')
    implementation('io.github.resilience4j:resilience4j-spring-boot2:1.7.1')
    implementation('io.micrometer:micrometer-registry-prometheus')
    /*implementation('ch.qos.logback.contrib:logback-json-classic:0.1.5')*/
    /*implementation('ch.qos.logback.contrib:logback-jackson:0.1.5')*/
    implementation('org.flywaydb:flyway-core:9.1.6')
    implementation('com.googlecode.json-simple:json-simple:1.1.1')
    runtimeOnly('org.postgresql:postgresql:42.4.2')

    implementation 'org.keycloak:keycloak-spring-boot-starter:19.0.1'
    implementation('org.keycloak:keycloak-spring-security-adapter:19.0.1') {
        exclude group: 'org.keycloak', module: 'keycloak-core'
    }
    implementation 'org.keycloak:keycloak-core'
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
    spotbugs 'com.github.spotbugs:spotbugs:4.7.1'

    implementation('io.opentelemetry:opentelemetry-exporter-jaeger:1.17.0')
    implementation('io.opentelemetry:opentelemetry-semconv:1.3.0-alpha')
    implementation group: 'io.grpc', name: 'grpc-okhttp', version: '1.48.1'
    implementation('org.springdoc:springdoc-openapi-ui:1.6.10')

    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap:3.1.3'


    testImplementation 'au.com.dius.pact.consumer:junit5:4.4.0-beta.4'
    testImplementation group: 'org.springframework.security', name: 'spring-security-test', version: '5.7.5'
    testImplementation group: 'com.h2database', name: 'h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.7.3'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

}

task copyTalismanHook(type: Exec) {
    workingDir "$projectDir"
    commandLine 'sh', 'tools/talisman/talisman-precommit.sh'
}

build.finalizedBy copyTalismanHook
// OWASP Dependency Check settings
dependencyCheck {
//set up a quality gate for vulnerabilities with high severity level:
//let's consider that a vulnerability has a high severity level if its CVSS score is higher than 7
//the build is going to fail if vulnerabilities with high severity level found
    failBuildOnCVSS = 7

//specify a list of known issues which contain:
//false-positives
//confirmed vulnerabilities which are not fixed yet, but we have a ticket for that
    suppressionFile = 'tools/dependency-check/dependency-check-known-issues.xml'
}

spotbugs {
    toolVersion = '4.5.3'
    excludeFilter = file("tools/spotbugs/exclude.xml")
}

spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsTest {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/test/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(build)) {
        spotbugsMain.enabled = false
        dependencyCheckAnalyze.enabled = false
        spotbugsTest.enabled = false

    }
}
    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/EFL-DevWork/Common"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }


    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }

